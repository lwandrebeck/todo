#!/bin/bash

#
# todo
#
# Copyright 2017 Laurent Wandrebeck <l.wandrebeck@quelquesmots.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#

# exit immediately if some command exits with non 0 status which is not taken care of ( || do something )
set -e
# make bash grumble on unset variables.
set -u

repo="https://github.com/lwandrebeck/todo"
version="0.9.10"

version () {
    echo "${version}"
}

usage() {
    echo "Usage: ${0} [option] [argument]

    -a : List All tasks.
    -b \"filename\" : Binary Backup of database to filename (which must not exist).
    -c rowid : Mark task with rowid as Completed at the moment the command is issued.
    -d rowid : Delete task with rowid from database (no cancel possible).
    -e \"/absolute/path\": update .todorc so database path points to an existing directory where .todo.db file already exist.
    -E \"/absolute/path\": update .todorc so database path points to an existing directory where .todo.db file already exist and erase database in previous path.
    -h : This Help.
    -i : Informations about database.
    -m \"/absolute/path\": Move database to another directory and update .todorc file accordingly.
    -M \"/absolute/path\" : Move database to another directory, update .todorc file accordingly, and create dir if it does not exist.
    -n \"task description\" : Create a New task. Creation time is stored at the moment command is issued.
    -p \"filename\" : DumP database in SQL format to a given file. Content will be overwritten if existing.
    -r \"filename\" : Restore a binary backup. !!! BEWARE !!! Database will be overwritten (previous content will be lost).
    -s word : Search for not yet completed tasks containing \" word \" (case insensitive search).
    -S word : Search for still valid and completed tasks containing \" word \" (case insensitive search).
    -t \"filename\" : ImporT a dump file in SQL format. !!! BEWARE !!! Database content will be erased before import.
    -u rowid : Mark as Unfinished a task previously marked as Completed.
    -v : Display Version.

Your todo database path is stored in ~/.todorc, which defaults to ~/.todo.db

SQLite does provide 4 engines, default (old) one, and FTS (newer) 3, 4 and 5 (Full Text Search).
FTS[345] do provide MATCH capability, which matches on word (space separated), unlike default engine which uses much slower LIKE %word% (*word* as in shell equivalent).
Note that it is highly unlikely your sqlite3 binary is old enough or compiled without FTS (at least 3) support. todo will use FTS3 if available."
}

error () {
    if [ ! -z "${1}" ]
    then
        echo "Something bad happened. command was: \"${1}\""
    else
        echo "Something bad happened."
    fi
}

informations () {
    local readonly query="SELECT * FROM info;"
    echo "Your todo database is located at: \"${1}\"
SQL mode used, database creation time, todo version when db was created, SQLite version at db creation."
    "${sqlite3}" -header -column "${tododb}" "${query}" || { error "informations function: ${query}" ; exit 3 ; }
    echo
    "${sqlite3}" "${tododb}" ".dbinfo" || { error "informations function: .dbinfo" ; exit 3 ; }
}

initializedb () {
    local readonly now=$(date +"%Y-%m-%d %R:%S")
    local readonly sqliteversion="$(${sqlite3} --version)"
    local readonly query="CREATE TABLE info(sqlmode TEXT NOT NULL, creation TEXT NOT NULL, todoversion TEXT NOT NULL, sqliteversion TEXT NOT NULL);"
    local readonly insert="INSERT INTO info(sqlmode, creation, todoversion, sqliteversion) VALUES ('${actualsqlmode}', '${now}', '${version}', '${sqliteversion}');"
    case "${actualsqlmode}" in
        "db"   ) query2="CREATE TABLE todo (title TEXT NOT NULL, creation TEXT NOT NULL, completed TEXT);" ;;
        "fts3" ) query2="CREATE VIRTUAL TABLE todo USING ${actualsqlmode}(title TEXT NOT NULL, creation TEXT NOT NULL, completed TEXT);" ;;
        *      ) echo "${sqlmode}" "is not a valid sqlmode value. That definitively should not have happened. Please report a bug at ${repo}"; exit 2 ;;
    esac
    initializedb_rollback () {
        rm -f "${tododb}"
        exit 3
    }
    # better no db than a partially initialized one.
    trap initializedb_rollback INT TERM EXIT
    "${sqlite3}" "${tododb}" "${query}" || { error "initializedb function: ${query}" ; exit 3 ; }
    "${sqlite3}" "${tododb}" "${insert}" || { error "initializedb function: ${insert}" ; exit 3 ; }
    "${sqlite3}" "${tododb}" "${query2}" || { error "initializedb function: ${query2}" ; exit 3 ; }
    # get rid of the trap
    trap - INT TERM EXIT
    echo "todo database \"${tododb}\" successfully created"
}

addentry () {
    local readonly now=$(date +"%Y-%m-%d %R:%S")
    local readonly query="INSERT INTO todo(title, creation, completed) VALUES('${1}', '${now}', NULL);"
    "${sqlite3}" "${tododb}" "${query}" || { error "addentry function: ${query}" ; exit 3 ; }
    echo "Task successfully added. Be brave !"
}

completeentry () {
    if [ -z "${1}" ]
    then
        usage
    else
        if [[ "${1}" =~ [0-9] ]]
        then
            local readonly now=$(date +"%Y-%m-%d %R:%S")
            local readonly query="UPDATE todo SET completed='${now}' WHERE rowid=${1};"
            # Completed field is simply updated without any check of its previous status.
            "${sqlite3}" "${tododb}" "${query}" || { error "completeentry function: ${query}" ; exit 3 ; }
            echo "Task ${1} marked as completed. Keep up the good work ! :)"
        else
            #id is not numeric
            usage
        fi
    fi
}

unfinishentry () {
    if [ -z "${1}" ]
    then
        usage
    else
        if [[ "${1}" =~ [0-9] ]]
        then
            # Completed field is simply updated without any check of its previous status.
            local readonly query="UPDATE todo SET completed=NULL WHERE rowid=${1};"
            "${sqlite3}" "${tododb}" "${query}" || { error "unfinishentry function: ${query}" ; exit 3 ; }
        else
            #id is not numeric
            usage
        fi
    fi
}

deleteentry () {
    if [ -z "${1}" ]
    then
        usage
    else
        if [[ "${1}" =~ [0-9] ]]
        then
            local readonly query="DELETE FROM todo WHERE rowid=${1};"
            # no check is done about task existence. DELETE does succeed even if task does not exist anymore.
            "${sqlite3}" "${tododb}" "${query}" || { error "deleteentry function: ${query}" ; exit 3 ; }
            echo "task \"${1}\" deleted."
        else
            #id is not numeric
            usage
        fi
    fi
}

listentries () {
    local readonly query="SELECT rowid, title, creation FROM todo WHERE completed IS NULL;"
    "${sqlite3}" ${sqliteopts} "${tododb}" "${query}" 2> /dev/null  || { error "listentries function: ${query}" ; exit 3 ; }
}

listallentries () {
    local readonly query="SELECT rowid, title, creation, completed FROM todo;"
    "${sqlite3}" ${sqliteopts} "${tododb}" "${query}" 2> /dev/null || { error "listallentries function: ${query}" ; exit 3 ; }
}

search () {
    if [ ! -z "${1}" ]
    then
        case "${sqlmode}" in
            "db"   ) local readonly query="SELECT rowid, title, creation FROM todo WHERE completed IS NULL AND title LIKE '%${1}%';" ;;
            "fts3" ) local readonly query="SELECT rowid, title, creation FROM todo WHERE completed IS NULL AND title MATCH '${1}';" ;;
            *      ) echo "${sqlmode}" "is not a valid sqlmode value. That definitively should not have happened. Please report a bug at ${repo}"; exit 2 ;;
        esac
    else
        usage
    fi
    "${sqlite3}" ${sqliteopts} "${tododb}" "${query}" 2> /dev/null || { error "search function: ${query}" ; exit 3 ; }
}

searchall () {
    if [ ! -z "${1}" ]
    then
        case "${sqlmode}" in
            "db"   ) local readonly query="SELECT rowid, title, creation, completed FROM todo WHERE title LIKE '%${1}%';" ;;
            "fts3" ) local readonly query="SELECT rowid, title, creation, completed FROM todo WHERE title MATCH '${1}';" ;;
            *      ) echo "${sqlmode}" "is not a valid sqlmode value. That definitively should not have happened. Please report a bug at ${repo}"; exit 2 ;;
        esac
    else
        usage
    fi
    "${sqlite3}" ${sqliteopts} "${tododb}" "${query}" 2> /dev/null || { error "searchall function: ${query}" ; exit 3 ; }
}

todorc () {
    # create default ~/.todorc file if it does not exist.
    todorc="${HOME}/.todorc"
    if [ ! -f "${todorc}" ]
    then
        echo "It looks like this is the first time you run todo. We hope you will like it"
        echo "Would you like to tweak todo database path ? (hit enter to keep default value (~/.todo.db), or give (potentially non-existing) dir) :"
        read -p "enter dir $ " tododbdir
        # user did not type anything
        if [ -z "${tododbdir}" ]
        then
            tododb="${HOME}/.todo.db"
        else
            # that directory does not exist
            if [ ! -d "${tododbdir}" ]
            then
                mkdir -p "${tododbdir}" || { error "todorc function: mkdir -p \"${tododbdir}\"" ; exit 5 ; }
                tododb="${tododbdir}/.todo.db"
            else
                #letâ€™s assure we can write into the existing directory
                if [ ! -w "${tododbdir}" ]
                then
                    echo "todorc function: Error: \"${tododbdir}\" is not writable, we canâ€™t store database there."
                    exit 6
                else
                    tododb="${tododbdir}/.todo.db"
                fi
            fi
        fi
        todorc_rollback () {
            rm -f "${todorc}"
            exit
        }
        # better no .todorc than an incomplete one
        trap todorc_rollback INT TERM EXIT
        echo "tododb=\"${tododb}\"" > "${todorc}"
        echo "sqliteopts=\"-header -column -init ${todosqliterc}\"" >> "${todorc}"
        # get rid of the trap
        trap - INT TERM EXIT
        echo "${todorc} successfully created."
    fi
    source "${todorc}"
}

todosqliterc () {
    todosqliterc="${HOME}/.todosqliterc"
    if [ ! -f "${todosqliterc}" ]
    then
        todosqliterc_rollback () {
            rm -f "${todosqliterc}"
            exit
        }
        # better no .todosqliterc than an incomplete one
        trap todosqliterc_rollback INT TERM EXIT
        echo ".width 5 83 19 19" > "${todosqliterc}"
        # get rid of the trap
        trap - INT TERM EXIT
        echo "${todosqliterc} successfully created."
    fi
}

dump () {
    "${sqlite3}" "${tododb}" ".dump" > "${1}" || { error "in dump function \"${sqlite3}\" \"${tododb}\" \".dump\" > \"${1}\"" ; exit 3 ; }
    echo "database \"${tododb}\" successfully dumped in SQL format to \"${1}\""
}

import () {
    "${sqlite3}" "${tododb}" "DROP TABLE info;" || { error "import function. DROP TABLE info;" ; exit 3 ; }
    echo "info table has been successfully dropped."
    "${sqlite3}" "${tododb}" "DROP TABLE todo;" || { error "import function. DROP TABLE info;" ; exit 3 ; }
    echo "todo table has been successfully dropped."
    cat "${1}" | "${sqlite3}" "${tododb}" || { error "import function at import phase." ; exit 3 ; }
    echo "todo database dump \"${1}\" has successfully replaced \"${tododb}\" content."
}

importwb () {
    if [ ! -z "${1}" ] && [ -r "${1}" ] && [ -f "${1}" ]
    then
        backup "${tododb}.beforeimportbackup"
        import "${1}"
    else
        error "\"${1}\" is either empty, non readable, or not a file. Database was not modified."
    fi
}

importwob () {
    if [ ! -z "${1}" ] && [ -r "${1}" ] && [ -f "${1}" ]
    then
        import "${1}"
    else
        error "\"${1}\" is either empty, non readable, or not a file. Database was not modified."
    fi
}

backup () {
    # do a binary backup of database.
    if [ ! -z "${1}" ] && [ ! -e "${1}" ]
    then
        "${sqlite3}" "${tododb}" ".backup '${1}'" || { error "backup function : Error while backup-ing database to \"${1}\". Exiting." ; exit 7 ; }
        echo "\"${tododb}\" was successfully backup-ed to \"${1}\""
    else
        echo "\"${1}\" is either empty or already existing. Backup aborted."
    fi
}

restore () {
    # restore a binary backup of database.
    if [ ! -z "${1}" ] && [ -f "${1}" ] && [ -r "${1}" ]
    then
        # be sure the file to restore is a SQLite database.
        local readonly type=$(file "${1}" | grep "SQLite 3" | wc -l)
        # 0 means this is not a SQLite3 file, 0 being Â« true Â» in shell.
        if [ ! ${type} ]
        then
            echo "\"${1}\" is not a SQLite 3 database. Cannot restore. Exiting."
            exit 7
        else
            "${sqlite3}" "${tododb}" ".restore '${1}'" || { error "restore function : Error while restoring database. Disk full ? Database may be corrupted :(. Exiting." ; exit 7 ; }
            echo "Database successfully restored from backup \"${1}\""
        fi
    else
        echo "\"${1}\" is either undefined, not a file or unreadable."
    fi
}

sqlite3checks () {
    #verify if sqlite3 command is available
    sqlite3="$(which sqlite3)"
    which sqlite3 &> /dev/null || unset sqlite3
    if [ -z "${sqlite3}" ]
    then
        echo "${0} needs sqlite3 command to run, please install it."
        exit 1
    fi
    # test if FTS is available
    actualsqlmode="fts3"
    local readonly tmp="$(mktemp)"
    "${sqlite3}" "${tmp}" "CREATE VIRTUAL TABLE test USING ${actualsqlmode}(title TEXT NOT NULL);" 2> /dev/null || actualsqlmode="db"
    # prevent remaining tmp file if todo is interrupted
    trap "rm -f '${tmp}' ; exit " INT TERM EXIT
    rm -f "${tmp}"
}

dbchecks () {
    if [ ! -f "${tododb}" ]
    then
        echo "todo database not found, creating itâ€¦"
        initializedb
    else
        sqlmode=$("${sqlite3}" "${tododb}" "SELECT sqlmode FROM info;") || { error "your database \"${tododb}\" lacks info table. That should not happen." ; exit 3 ; }
        # weâ€™ve got a fts3 database and sqlite3 is so old it canâ€™t manage it.
        if [ "${sqlmode}" == "fts3" ] && [ "${actualsqlmode}" == "db" ]
        then
            echo "Sorry, your todo database ${tododb} uses FTS3 format, which your ${sqlite3} binary does not support. Exiting."
            exit 4
        fi
    fi
}

movedb () {
    if [ ! -d "${1}" ]
    then
        echo "\"${1}\" is not a directory"
        exit 5
    else
        # we can write, thereâ€™s no ${1}/.todo.db, and directory begins with a / (absolute path)
        if [ -w "${1}" ] && [ ! -e "${1}/.todo.db" ] && [ "${1:0:1}" == "/" ]
        then
            mv "${tododb}" "${1}/" || { error "Move of database has failed. ~/.todorc has not been modified." ; exit 8 ; }
            echo "tododb=\"${1}/.todo.db\"" > "${todorc}.new"
            echo "sqliteopts=\"${sqliteopts}\"" >> "${todorc}.new"
            mv -f "${todorc}.new" "${todorc}"
        else
            echo "Either \"${1}\" is not writable, or \"${1}/.todo.db\" already exists. Please fix."
            exit 8
        fi
    fi
}

mkdirmovedb () {
    if [ ! -d "${1}" ] && [ "${1:0:1}" == "/" ]
    then
        mkdir -p "${1}" || error "Error creating new directory to store database."
        exit 5
    else
        if [ "${1:0:1}" == "/" ]
        then
            echo "\"${1}\" is not an absolute path."
            exit 5
        fi
    fi
    # we can write, and thereâ€™s no ${1}/.todo.db
    if [ -w "${1}" ] && [ ! -e "${1}/.todo.db" ]
    then
        mv "${tododb}" "${1}/" || { error "Move of database has failed. ~/.todorc has not been modified." ; exit 8 ; }
        echo "tododb=\"${1}/.todo.db\"" > "${todorc}.new"
        echo "sqliteopts=\"${sqliteopts}\"" >> "${todorc}.new"
        mv -f "${todorc}.new" "${todorc}"
    else
        echo "Either \"${1}\" is not writable, or \"${1}/.todo.db\" already exists. Please fix."
        exit 8
    fi
}

#update todorc file when you already have an existing db
updateexistingdbpath () {
    if [ ! -d "${1}" ] || [ ! -f "${1}/.todo.db" ]
    then
        echo "Either \"${1}\" is not a directory or \"${1}/.todo.db\" does not exist."
        exit 5
    else
        # we can write, there is a ${1}/.todo.db file, and directory begins with a / (absolute path)
        if [ -w "${1}" ] && [ -e "${1}/.todo.db" ] && [ "${1:0:1}" == "/" ]
        then
            echo "tododb=\"${1}/.todo.db\"" > "${todorc}.new"
            echo "sqliteopts=\"${sqliteopts}\"" >> "${todorc}.new"
            mv -f "${todorc}.new" "${todorc}"
            echo "todo now points to \"${1}/.todo.db\" database instead of \"${tododb}\""
        else
            echo "Either \"${1}\" is not writable, or \"${1}/.todo.db\" does not exist. Please fix."
            exit 8
        fi
    fi
}

#update todorc file when you already have an existing db
eraseupdateexistingdbpath () {
    if [ ! -d "${1}" ] || [ ! -f "${1}/.todo.db" ]
    then
        echo "Either \"${1}\" is not a directory or \"${1}/.todo.db\" does not exist."
        exit 5
    else
        # we can write, there is a ${1}/.todo.db file, and directory begins with a / (absolute path)
        if [ -w "${1}" ] && [ -e "${1}/.todo.db" ] && [ "${1:0:1}" == "/" ]
        then
            echo "tododb=\"${1}/.todo.db\"" > "${todorc}.new"
            echo "sqliteopts=\"${sqliteopts}\"" >> "${todorc}.new"
            mv -f "${todorc}.new" "${todorc}"
            echo "todo now points to \"${1}/.todo.db\" database instead of \"${tododb}\""
            if [ -f "${tododb}" ] && [ -w "${tododb}" ]
            then
                rm -f "${tododb}"
                echo "\"${tododb}\" has been deleted."
            else
                echo "\"${tododb}\" is either not a file or not writeable. Exiting without deleting it."
            fi
        else
            echo "Either \"${1}\" is not writable, or \"${1}/.todo.db\" does not exist. Please fix."
            exit 8
        fi
    fi
}


main () {
    #satisfy set -u
    local readonly args=${1:-}
    if [ -z "${args}" ]
    then
        listentries
        exit
    else
        if ( ! getopts ab:c:d:e:E:him:M:n:p:r:s:S:t:T:u:v OPT )
        then
            usage
            exit 1
        fi
    fi

    while getopts ab:c:d:e:E:him:M:n:p:r:s:S:t:T:u:v OPT;
    do
        case $OPT in
            a) listallentries ;;
            b) backup "$OPTARG" ;;
            c) completeentry "$OPTARG" ;;
            d) deleteentry "$OPTARG" ;;
            e) updateexistingdbpath "$OPTARG" ;;
            E) eraseupdateexistingdbpath "$OPTARG" ;;
            h) usage ;;
            i) informations "${tododb}" ;;
            m) movedb "$OPTARG" ;;
            M) mkdirmovedb "$OPTARG" ;;
            n) addentry "$OPTARG" ;;
            p) dump "$OPTARG" ;;
            r) restore "$OPTARG" ;;
            s) search "$OPTARG" ;;
            S) searchall "$OPTARG" ;;
            t) importwb "$OPTARG" ;;
            T) importwob "$OPTARG" ;;
            u) unfinishentry "$OPTARG" ;;
            v) version ;;
            \?) usage
                exit ;;
            :) echo "Missing argument for $OPT"
                usage
                exit ;;
        esac
    done
}

todosqliterc
todorc
sqlite3checks
dbchecks
main "$@"
