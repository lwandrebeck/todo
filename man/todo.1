.TH todo 1 "June 15, 2017" "version 0.9.10" "USER COMMANDS"

.SH NAME
todo \- simple todo list manager written in Bash, using SQLite to store your todo list data.

.SH SYNOPSYS
.B todo
[\-a] [\-b binaryfilename] [\-c rowid] [\-d rowid] [\-e "/path/to/existing/database"] [\-E "/path/to/existing/database"] [\-h] [\-i] [\-m "/new/path"] [\-M "/new/path"] [\-p "/path/to/sqldumpfile"] [\-n "task description"] [\-s word] [\-t "/path/to/sqldumpfile"] [\-T "/path/to/sqldumpfile"] [\-S word] [\-u rowid] [\-v]

.SH DESCRIPTION
todo is a simple todo list manager written in Bash, using SQLite to store your todo list data.
.PP
Basic informations about your database are available: SQLite database format (sqlmode), date of database creation, todo version used at database creation (if format is to change some day, that will allow continuity, and SQLite version used when database was created).
.PP
~/.todorc file allows you to define the database path (TODODB variable, using Bash syntax), and SQLite options.
.PP
~/.todosqliterc file allows to tweak SQLite output (display is tailored for 132 columns terminals by default). See man sqlite3

.SH OPTIONS
.TP
(none)
Lists all valid tasks (completed ones are ignored).
.TP
\-a
Lists all tasks, even ones marked as completed.
.TP
\-b
Binary Backup of database. Argument is backup filename and must not contain any special character (space etc, getopts do not like it). Otherwise, filename may not be correctly understood, and backup will not have the name intended.
.TP
\-c
Mark as completed task with corresponding rowid. rowid is an integer.
.TP
\-d
Delete a task with corresponding rowid. Recovery is not possible.
.TP
\-e
UpdatE path of .todo.db in .todorc when database already exists (in case you have your db on some cloud, which is accessible from several machines). Checks that database file exists, is writeable.
.TP
\-E
UpdatE path of .todo.db in .todorc when database already exists (in case you have your db on some cloud, which is accessible from several machines). Checks that database file exists, is writeable. Deletes database in previous path if possible.
.TP
\-h
Display help.
.TP
\-i
Display informations about your todo database (SQL mode used, date of database creation, todo version when database was created, SQLite version when database was created).
.TP
\-m
Move database to another (existing) directory, and updates .todorc accordingly. Argument is absolute path where you want database to be moved, and must/should be "quoted".
.TP
\-M
Move database to another directory (created if needed), and updates .todorc accordingly. Argument is absolute path where you want database to be moved, and must/should be "quoted".
.TP
\-n
Create a new task. Argument is task description and must be "quoted". Otherwise, task will be created with only the 1st word of description.
.TP
\-p
DumP database in SQL format. Argument is a filename, and must be "quoted". Otherwise, filename may not be correctly understood (especially in case of space or other special character) and dump will not be named as intended.
.TP
\-r
Restore a binary backup of database. Argument is filename, and must not contain any special character (getopts do not like it). Otherwise, filename may not be correctly understood (especially in case of space or other special character), and restore will fail.
.TP
\-s
Search for unfinished tasks (not marked as completed) containing either '%word%' (*word* in shell equivalent) if database was created using old format, or ' word ' if using FTS3 (Full Text Search) engine of SQLite (most likely the case).
.TP
\-S
Search for still valid and completed tasks containing either '%word%' (*word* in shell equivalent) if database was created using old format, or ' word ' if using FTS3 (Full Text Search) engine of SQLite (most likely the case).
.TP
\-t
ImporT a dump in SQL format. Argument is a filename, and must be "quoted". A backup of the database is done before import. !!! BEWARE !!! Content of database will be erased before import.
.TP
\-T
ImporT a dump in SQL format. Argument is a filename, and must be "quoted". !!! BEWARE !!! No backup of the database is done before import. Content of database will be erased before import.
.TP
\-u
Mark a completed task as unfinished. Argument is integer.
.TP
\-v
Display todo version.

.SH EXAMPLES
.TP
Display all tasks (but ones that have been deleted (-d)):
.B todo
\-a
.PP
.TP
Display database informations, and todo version:
.B todo
\-i \-v
.PP
.TP
Search for valid tasks containing word debug:
.B todo
\-s "debug"
.PP

.SH ENVIRONMENT
todo does not export any variable.

.SH FILES
todo
.PP
todo.1 (man page)
.PP
~/.todorc
.PP
~/.todosqliterc
.PP
~/.todo.db (path can be changed via ~/.todorc)

.SH EXIT STATUS
0: Everything went fine.
.PP
1: sqlite3 command could not be found.
.PP
2: SQLMODE (defined in ~/.todorc) has a non valid value.
.PP
3: There was a problem when interacting with SQLite.
.PP
4: Database uses FTS3 SQLMODE, but sqlite3 does not support it (that could happen if you use some kind of cloud to store your todo database, and are in front of a VERY old OS), or if the packager did not compile sqlite3 with FTS support (unlikely)).
.PP
5: There was a problem with the directory destined to store todo database.
.PP
6: Database directory is not writable, so we can’t store todo database there.
7: There was a problem during backup or restore (no write rights on location ? Disk full ? Wrong type of file…)
8: Error on database move.

.SH AUTHOR
Laurent Wandrebeck (l.wandrebeck (at) quelquesmots.fr)
